name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CLAUDE_OBSERVABILITY_HUB: http://localhost:4000

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Python linters
        run: |
          pip install black ruff mypy
      
      - name: Run Black
        run: black --check templates/
      
      - name: Run Ruff
        run: ruff check templates/
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install Node dependencies
        run: |
          cd core/server && bun install
          cd ../dashboard && npm install
      
      - name: Run ESLint
        run: |
          cd core/server && bun run lint
          cd ../dashboard && npm run lint

  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: Run tests with coverage
        run: |
          pytest templates/hooks/.claude/hooks/tests/ \
            -v \
            --cov=templates/hooks/.claude/hooks \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=test-results/python-${{ matrix.python-version }}.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: python-test-results-${{ matrix.python-version }}
          path: |
            test-results/
            htmlcov/
            coverage.xml
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python-${{ matrix.python-version }}
          name: Python ${{ matrix.python-version }}

  test-bun:
    name: Bun/TypeScript Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      
      - name: Install dependencies
        working-directory: ./core/server
        run: bun install
      
      - name: Run tests with coverage
        working-directory: ./core/server
        run: |
          mkdir -p test-results
          bun test --coverage --reporter=junit > test-results/bun.xml || true
          bun test --coverage
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bun-test-results
          path: |
            core/server/test-results/
            core/server/coverage/
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./core/server/coverage/coverage-final.json
          flags: bun
          name: Bun Server

  test-vue:
    name: Vue Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: core/dashboard/package-lock.json
      
      - name: Install dependencies
        working-directory: ./core/dashboard
        run: npm ci
      
      - name: Run tests with coverage
        working-directory: ./core/dashboard
        run: |
          mkdir -p test-results
          npm run test:coverage -- --reporter=junit --outputFile=test-results/vue.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: vue-test-results
          path: |
            core/dashboard/test-results/
            core/dashboard/coverage/
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./core/dashboard/coverage/coverage-final.json
          flags: vue
          name: Vue Dashboard

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-bun, test-vue]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start services
        run: |
          docker-compose -f docker-compose.test.yml up -d test-hub
          
          # Wait for hub to be healthy
          timeout 30s bash -c 'until docker-compose -f docker-compose.test.yml ps test-hub | grep -q "healthy"; do sleep 1; done'
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install test dependencies
        run: |
          pip install pytest requests websocket-client
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --junit-xml=integration-results.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-results.xml
      
      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-python, test-bun, test-vue]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build hub image
        uses: docker/build-push-action@v5
        with:
          context: ./core/server
          push: false
          tags: claude-observability/hub:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build dashboard image
        uses: docker/build-push-action@v5
        with:
          context: ./core/dashboard
          push: false
          tags: claude-observability/dashboard:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-devcontainer:
    name: Test DevContainer
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Test DevContainer build
        uses: devcontainers/ci@v0.3
        with:
          imageName: claude-observability-devcontainer
          cacheFrom: claude-observability-devcontainer
          push: never
          runCmd: |
            # Verify tools are installed
            python --version
            bun --version
            node --version
            
            # Run basic tests
            cd /workspaces/${{ github.event.repository.name }}
            ./scripts/test-python.sh

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-python, test-bun, test-vue]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download coverage reports
        uses: actions/download-artifact@v3
      
      - name: Generate coverage summary
        run: |
          echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Python | ![Coverage](https://img.shields.io/codecov/c/github/${{ github.repository }}/main?flag=python&label=) |" >> $GITHUB_STEP_SUMMARY
          echo "| Bun/TS | ![Coverage](https://img.shields.io/codecov/c/github/${{ github.repository }}/main?flag=bun&label=) |" >> $GITHUB_STEP_SUMMARY
          echo "| Vue | ![Coverage](https://img.shields.io/codecov/c/github/${{ github.repository }}/main?flag=vue&label=) |" >> $GITHUB_STEP_SUMMARY